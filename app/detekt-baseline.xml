<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:MainActivity.kt$MainActivity$config.showNotePicker &amp;&amp; savedInstanceState == null &amp;&amp; hasNoIntent &amp;&amp; !mIsPasswordProtectionPending</ID>
    <ID>ComplexCondition:MainActivity.kt$MainActivity$requestCode == PICK_EXPORT_FILE_INTENT &amp;&amp; resultCode == Activity.RESULT_OK &amp;&amp; resultData != null &amp;&amp; resultData.data != null &amp;&amp; mNotes.isNotEmpty()</ID>
    <ID>ComplexCondition:MainActivity.kt$MainActivity$requestCode == PICK_OPEN_FILE_INTENT &amp;&amp; resultCode == RESULT_OK &amp;&amp; resultData != null &amp;&amp; resultData.data != null</ID>
    <ID>ComplexCondition:TextFragment.kt$TextFragment$config.showKeyboard &amp;&amp; isMenuVisible &amp;&amp; (!note!!.isLocked() || shouldShowLockedContent)</ID>
    <ID>CyclomaticComplexMethod:MainActivity.kt$MainActivity$private fun refreshMenuItems()</ID>
    <ID>CyclomaticComplexMethod:MainActivity.kt$MainActivity$private fun setupOptionsMenu()</ID>
    <ID>CyclomaticComplexMethod:TextFragment.kt$TextFragment$@SuppressLint("ClickableViewAccessibility") private fun setupFragment()</ID>
    <ID>EmptyCatchBlock:String.kt${ }</ID>
    <ID>EmptyFunctionBlock:OpenNoteAdapter.kt$OpenNoteAdapter${}</ID>
    <ID>EmptyFunctionBlock:TasksAdapter.kt$TasksAdapter${}</ID>
    <ID>EmptyFunctionBlock:WidgetAdapter.kt$WidgetAdapter${}</ID>
    <ID>LargeClass:MainActivity.kt$MainActivity : SimpleActivity</ID>
    <ID>LongMethod:Context.kt$fun Context.backupNotes()</ID>
    <ID>MagicNumber:AutomaticBackupReceiver.kt$AutomaticBackupReceiver$3000</ID>
    <ID>MagicNumber:Config.kt$Config$100</ID>
    <ID>MagicNumber:Constants.kt$6</ID>
    <ID>MagicNumber:Context.kt$100f</ID>
    <ID>MagicNumber:ImportFolderDialog.kt$ImportFolderDialog$1000</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$0.4f</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$1000</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$127</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$250</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$255</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$50</ID>
    <ID>MagicNumber:NotesDatabase.kt$NotesDatabase.Companion.&lt;no name provided&gt;$3</ID>
    <ID>MagicNumber:NotesDatabase.kt$NotesDatabase.Companion.&lt;no name provided&gt;$4</ID>
    <ID>MagicNumber:NotesHelper.kt$NotesHelper$200</ID>
    <ID>MagicNumber:Task.kt$CompletedTasks$42</ID>
    <ID>MagicNumber:TextFragment.kt$TextFragment$.4f</ID>
    <ID>MagicNumber:WidgetConfigureActivity.kt$WidgetConfigureActivity$100</ID>
    <ID>MagicNumber:WidgetConfigureActivity.kt$WidgetConfigureActivity$100f</ID>
    <ID>MagicNumber:WidgetConfigureActivity.kt$WidgetConfigureActivity$3</ID>
    <ID>MagicNumber:WidgetConfigureActivity.kt$WidgetConfigureActivity$4</ID>
    <ID>MaxLineLength:Config.kt$Config$set(addNewCheckListItemsTop) = prefs.edit().putBoolean(ADD_NEW_CHECKLIST_ITEMS_TOP, addNewCheckListItemsTop).apply()</ID>
    <ID>MaxLineLength:Constants.kt$const val MOVE_DONE_CHECKLIST_ITEMS = "move_undone_checklist_items" // it has been replaced from moving undone items at the top to moving done to bottom</ID>
    <ID>MaxLineLength:Context.kt$AlarmManagerCompat.setExactAndAllowWhileIdle(alarmManager, AlarmManager.RTC_WAKEUP, backupAtMillis, pendingIntent)</ID>
    <ID>MaxLineLength:Context.kt$applicationContext.contentResolver.openOutputStream(exportFileUri, "wt") ?: FileOutputStream(exportFile)</ID>
    <ID>MaxLineLength:Context.kt$fun Context.getPercentageFontSize()</ID>
    <ID>MaxLineLength:Context.kt$return PendingIntent.getBroadcast(this, AUTOMATIC_BACKUP_REQUEST_CODE, intent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)</ID>
    <ID>MaxLineLength:Context.kt$val widgetIDs = AppWidgetManager.getInstance(applicationContext)?.getAppWidgetIds(ComponentName(applicationContext, MyWidgetProvider::class.java)) ?: return</ID>
    <ID>MaxLineLength:DeleteNoteDialog.kt$DeleteNoteDialog$.</ID>
    <ID>MaxLineLength:ExportFilesDialog.kt$ExportFilesDialog$class</ID>
    <ID>MaxLineLength:ExportNotesDialog.kt$ExportNotesDialog$activity.getAlertDialogBuilder().setPositiveButton(org.fossify.commons.R.string.ok, null).setNegativeButton(org.fossify.commons.R.string.cancel, null)</ID>
    <ID>MaxLineLength:ImportFolderDialog.kt$ImportFolderDialog$class</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$!config.autosaveNotes &amp;&amp; showSaveButton &amp;&amp; (::mCurrentNote.isInitialized &amp;&amp; mCurrentNote.type == NoteType.TYPE_TEXT)</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$(drawable as LayerDrawable).findDrawableByLayerId(R.id.shortcut_plus_background).applyColorFilter(appIconColor)</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$// if we got here by some other app invoking the file open intent, we have no permission for updating the original file itself</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$ConfirmationDialog</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$Note(null, title.substringBeforeLast('.'), fileText, NoteType.TYPE_CHECKLIST, "", PROTECTION_NONE, "")</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$displayNewNoteDialog(note.value, title = it.title, it.path, setChecklistAsDefault = true)</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$faqItems.add(FAQItem(org.fossify.commons.R.string.faq_10_title_commons, org.fossify.commons.R.string.faq_10_text_commons))</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$faqItems.add(FAQItem(org.fossify.commons.R.string.faq_2_title_commons, org.fossify.commons.R.string.faq_2_text_commons))</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$faqItems.add(FAQItem(org.fossify.commons.R.string.faq_6_title_commons, org.fossify.commons.R.string.faq_6_text_commons))</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$faqItems.add(FAQItem(org.fossify.commons.R.string.faq_7_title_commons, org.fossify.commons.R.string.faq_7_text_commons))</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$findItem(R.id.lock_note).isVisible = mNotes.isNotEmpty() &amp;&amp; (::mCurrentNote.isInitialized &amp;&amp; !mCurrentNote.isLocked())</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$findItem(R.id.more_apps_from_us).isVisible = !resources.getBoolean(org.fossify.commons.R.bool.hide_google_relations)</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$findItem(R.id.unlock_note).isVisible = mNotes.isNotEmpty() &amp;&amp; (::mCurrentNote.isInitialized &amp;&amp; mCurrentNote.isLocked())</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$fun</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$getPagerAdapter().updateCurrentNoteData(binding.viewPager.currentItem, mCurrentNote.path, mCurrentNote.value)</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$if</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$intent.flags = intent.flags or Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NO_HISTORY</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$private</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$private fun isCurrentItemChecklist()</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$updateMaterialActivityViews(binding.mainCoordinator, null, useTransparentNavigation = false, useTopSearchMenu = false)</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$val newChecklist = Note(null, getCurrentFormattedDateTime(), "", NoteType.TYPE_CHECKLIST, "", PROTECTION_NONE, "")</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$val newTextNote = Note(null, getCurrentFormattedDateTime(), "", NoteType.TYPE_TEXT, "", PROTECTION_NONE, "")</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$}</ID>
    <ID>MaxLineLength:MyWidgetProvider.kt$MyWidgetProvider$PendingIntent.getActivity(context, widgetId, startActivityIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)</ID>
    <ID>MaxLineLength:MyWidgetProvider.kt$MyWidgetProvider$val pendingIntent = PendingIntent.getActivity(context, widget.widgetId, intent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)</ID>
    <ID>MaxLineLength:NewChecklistItemDialog.kt$NewChecklistItemDialog$if</ID>
    <ID>MaxLineLength:NewChecklistItemDialog.kt$NewChecklistItemDialog$titles.all { it.text!!.isEmpty() } -&gt; activity.toast(org.fossify.commons.R.string.empty_name)</ID>
    <ID>MaxLineLength:NewChecklistItemDialog.kt$NewChecklistItemDialog$val titles = titles.map { it.text.toString() }.filter { it.isNotEmpty() }.toMutableList() as ArrayList&lt;String&gt;</ID>
    <ID>MaxLineLength:NewNoteDialog.kt$NewNoteDialog$activity.notesDB.getNoteIdWithTitle(newTitle) != null -&gt; activity.toast(R.string.title_taken)</ID>
    <ID>MaxLineLength:NewNoteDialog.kt$NewNoteDialog$class</ID>
    <ID>MaxLineLength:NewNoteDialog.kt$NewNoteDialog$val</ID>
    <ID>MaxLineLength:NotesDatabase.kt$NotesDatabase.Companion.&lt;no name provided&gt;$execSQL("ALTER TABLE widgets ADD COLUMN widget_bg_color INTEGER NOT NULL DEFAULT $defaultWidgetBgColor")</ID>
    <ID>MaxLineLength:NotesDatabase.kt$NotesDatabase.Companion.&lt;no name provided&gt;$execSQL("ALTER TABLE widgets ADD COLUMN widget_text_color INTEGER NOT NULL DEFAULT $DEFAULT_WIDGET_TEXT_COLOR")</ID>
    <ID>MaxLineLength:NotesPagerAdapter.kt$NotesPagerAdapter$class</ID>
    <ID>MaxLineLength:OpenFileDialog.kt$OpenFileDialog$class</ID>
    <ID>MaxLineLength:OpenFileDialog.kt$OpenFileDialog$val updateFileOnEdit = binding.openFileType.checkedRadioButtonId == binding.openFileUpdateFile.id</ID>
    <ID>MaxLineLength:OpenNoteAdapter.kt$OpenNoteAdapter$iconLock.setImageDrawable(activity.resources.getColoredDrawableWithColor(org.fossify.commons.R.drawable.ic_lock_vector, properPrimaryColor))</ID>
    <ID>MaxLineLength:OpenNoteDialog.kt$OpenNoteDialog$binding.dialogOpenNoteList.layoutManager = AutoStaggeredGridLayoutManager(noteItemWidth, StaggeredGridLayoutManager.VERTICAL)</ID>
    <ID>MaxLineLength:RenameNoteDialog.kt$RenameNoteDialog$class</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$NotesHelper.ImportResult.IMPORT_PARTIAL -&gt; toast(org.fossify.commons.R.string.importing_some_entries_failed)</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$binding.settingsUseEnglishHolder.beVisibleIf((config.wasUseEnglishToggled || Locale.getDefault().language != "en") &amp;&amp; !isTiramisuPlus())</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$org.fossify.commons.R.string.fingerprint_setup_successfully</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$updateMaterialActivityViews(binding.settingsCoordinator, binding.settingsHolder, useTransparentNavigation = true, useTopSearchMenu = false)</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$val items = listOf(GRAVITY_START, GRAVITY_CENTER, GRAVITY_END).map { RadioItem(it, getGravityOptionLabel(it)) }</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$val leftToRightDirection = TextUtilsCompat.getLayoutDirectionFromLocale(Locale.getDefault()) == ViewCompat.LAYOUT_DIRECTION_LTR</ID>
    <ID>MaxLineLength:TasksAdapter.kt$TasksAdapter$menu.findItem(R.id.cab_move_to_bottom).isVisible = selectedItems.none { it.isDone } || !activity.config.moveDoneChecklistItems</ID>
    <ID>MaxLineLength:TasksAdapter.kt$TasksAdapter$menu.findItem(R.id.cab_move_to_top).isVisible = selectedItems.none { it.isDone } || !activity.config.moveDoneChecklistItems</ID>
    <ID>MaxLineLength:TasksAdapter.kt$TasksAdapter$private fun getSelectedItems()</ID>
    <ID>MaxLineLength:TasksAdapter.kt$TasksAdapter$text = resources.getQuantityString(R.plurals.num_checked_items, completedTasks.tasks.size, completedTasks.tasks.size)</ID>
    <ID>MaxLineLength:TasksFragment.kt$TasksFragment$note.getNoteStoredValue(requireActivity())?.split("\n")?.map { it.trim() }?.filter { it.isNotBlank() }</ID>
    <ID>MaxLineLength:TasksFragment.kt$TasksFragment$tasks = Gson().fromJson&lt;ArrayList&lt;Task&gt;&gt;(storedNote.getNoteStoredValue(requireActivity()), taskType) ?: ArrayList(1)</ID>
    <ID>MaxLineLength:TextFragment.kt$TextFragment$val inputManager = requireActivity().getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager</ID>
    <ID>MaxLineLength:UnlockNotesDialog.kt$UnlockNotesDialog$activity</ID>
    <ID>MaxLineLength:UnlockNotesDialog.kt$UnlockNotesDialog$class</ID>
    <ID>MaxLineLength:WidgetAdapter.kt$WidgetAdapter$// checklist title can be null only because of the glitch in upgrade to 6.6.0, remove this check in the future</ID>
    <ID>MaxLineLength:WidgetAdapter.kt$WidgetAdapter$tasks = note!!.getNoteStoredValue(context)?.ifEmpty { "[]" }?.let { Json.decodeFromString(it) } ?: mutableListOf()</ID>
    <ID>MaxLineLength:WidgetAdapter.kt$WidgetAdapter$val paintFlags = if (checklistItem.isDone) Paint.STRIKE_THRU_TEXT_FLAG or Paint.ANTI_ALIAS_FLAG else Paint.ANTI_ALIAS_FLAG</ID>
    <ID>MaxLineLength:WidgetAdapter.kt$WidgetAdapter$val widgetNewTextColor = if (checklistItem.isDone) widgetTextColor.adjustAlpha(DONE_CHECKLIST_ITEM_ALPHA) else widgetTextColor</ID>
    <ID>MaxLineLength:WidgetConfigureActivity.kt$WidgetConfigureActivity$if</ID>
    <ID>MaxLineLength:WidgetConfigureActivity.kt$WidgetConfigureActivity$val id = if (extras?.containsKey(CUSTOMIZED_WIDGET_KEY_ID) == true) extras.getLong(CUSTOMIZED_WIDGET_KEY_ID) else null</ID>
    <ID>MaxLineLength:WidgetConfigureActivity.kt$WidgetConfigureActivity$val sampleValue = if (note.value.isEmpty() || mIsCustomizingColors) getString(R.string.widget_config) else note.value</ID>
    <ID>NestedBlockDepth:MainActivity.kt$MainActivity$private fun checkIntents(intent: Intent)</ID>
    <ID>NestedBlockDepth:Note.kt$Note$fun getNoteStoredValue(context: Context): String?</ID>
    <ID>NestedBlockDepth:OpenNoteAdapter.kt$OpenNoteAdapter$private fun Note.getFormattedValue(context: Context): CharSequence?</ID>
    <ID>NestedBlockDepth:TasksFragment.kt$TasksFragment$private fun prepareTaskItems(): List&lt;NoteItem&gt;</ID>
    <ID>ReturnCount:TasksFragment.kt$TasksFragment$private fun saveNote(callback: () -&gt; Unit = {})</ID>
    <ID>ReturnCount:TextFragment.kt$TextFragment$fun saveText(force: Boolean, callback: ((note: Note) -&gt; Unit)? = null)</ID>
    <ID>SwallowedException:MainActivity.kt$MainActivity$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:MainActivity.kt$MainActivity$e: Exception</ID>
    <ID>SwallowedException:MainActivity.kt$MainActivity$e: NetworkErrorException</ID>
    <ID>SwallowedException:Note.kt$Note$e: Exception</ID>
    <ID>SwallowedException:String.kt$e: Exception</ID>
    <ID>SwallowedException:TasksFragment.kt$TasksFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Context.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MainActivity.kt$MainActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Note.kt$Note$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NotesPagerAdapter.kt$NotesPagerAdapter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsActivity.kt$SettingsActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:String.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TasksFragment.kt$TasksFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TextFragment.kt$TextFragment$e: Exception</ID>
    <ID>TooManyFunctions:MainActivity.kt$MainActivity : SimpleActivity</ID>
    <ID>TooManyFunctions:NotesPagerAdapter.kt$NotesPagerAdapter : FragmentStatePagerAdapter</ID>
    <ID>TooManyFunctions:OpenNoteAdapter.kt$OpenNoteAdapter : MyRecyclerViewAdapter</ID>
    <ID>TooManyFunctions:SettingsActivity.kt$SettingsActivity : SimpleActivity</ID>
    <ID>TooManyFunctions:TasksAdapter.kt$TasksAdapter : MyRecyclerViewListAdapterItemTouchHelperContract</ID>
    <ID>TooManyFunctions:TasksFragment.kt$TasksFragment : NoteFragmentTasksActionListener</ID>
    <ID>TooManyFunctions:TextFragment.kt$TextFragment : NoteFragment</ID>
    <ID>TooManyFunctions:WidgetAdapter.kt$WidgetAdapter : RemoteViewsFactory</ID>
    <ID>TooManyFunctions:WidgetConfigureActivity.kt$WidgetConfigureActivity : SimpleActivity</ID>
    <ID>VariableNaming:MainActivity.kt$MainActivity$private val EXPORT_FILE_NO_SYNC = 2</ID>
    <ID>VariableNaming:MainActivity.kt$MainActivity$private val EXPORT_FILE_SYNC = 1</ID>
    <ID>VariableNaming:MainActivity.kt$MainActivity$private val IMPORT_FILE_NO_SYNC = 2</ID>
    <ID>VariableNaming:MainActivity.kt$MainActivity$private val IMPORT_FILE_SYNC = 1</ID>
    <ID>VariableNaming:MainActivity.kt$MainActivity$private val PICK_EXPORT_FILE_INTENT = 2</ID>
    <ID>VariableNaming:MainActivity.kt$MainActivity$private val PICK_OPEN_FILE_INTENT = 1</ID>
    <ID>VariableNaming:TextFragment.kt$TextFragment$private val TEXT = "text"</ID>
    <ID>WildcardImport:Context.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:Context.kt$import org.fossify.notes.helpers.*</ID>
    <ID>WildcardImport:EditTaskDialog.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:ExportFileDialog.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:ExportFilesDialog.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:ExportNotesDialog.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:ImportFolderDialog.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:MainActivity.kt$import org.fossify.commons.dialogs.*</ID>
    <ID>WildcardImport:MainActivity.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:MainActivity.kt$import org.fossify.commons.helpers.*</ID>
    <ID>WildcardImport:MainActivity.kt$import org.fossify.notes.dialogs.*</ID>
    <ID>WildcardImport:MainActivity.kt$import org.fossify.notes.extensions.*</ID>
    <ID>WildcardImport:MainActivity.kt$import org.fossify.notes.helpers.*</ID>
    <ID>WildcardImport:ManageAutoBackupsDialog.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:NewChecklistItemDialog.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:NewNoteDialog.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:Note.kt$import androidx.room.*</ID>
    <ID>WildcardImport:NoteFragment.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:NotesDao.kt$import androidx.room.*</ID>
    <ID>WildcardImport:OpenNoteAdapter.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:RenameNoteDialog.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:SettingsActivity.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:SettingsActivity.kt$import org.fossify.commons.helpers.*</ID>
    <ID>WildcardImport:SettingsActivity.kt$import org.fossify.notes.extensions.*</ID>
    <ID>WildcardImport:SettingsActivity.kt$import org.fossify.notes.helpers.*</ID>
    <ID>WildcardImport:TasksFragment.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:TextFragment.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:UnlockNotesDialog.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:WidgetAdapter.kt$import org.fossify.notes.helpers.*</ID>
    <ID>WildcardImport:WidgetConfigureActivity.kt$import org.fossify.commons.extensions.*</ID>
    <ID>WildcardImport:WidgetConfigureActivity.kt$import org.fossify.notes.helpers.*</ID>
  </CurrentIssues>
</SmellBaseline>
